#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Sep 14, 2019 01:12:38 AM +0630  platform: Darwin

import sys
from ui1 import *
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ui2_support

def vp2_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    ui2_support.set_Tk_var()
    top = Toplevel1 (root)
    ui2_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    ui2_support.set_Tk_var()
    top = Toplevel1 (w)
    ui2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def uione(self):
        vp1_start_gui()

    def viewdataset(self):
        print('dataset -->', ui2_support.combobox.get())

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Al Bayan} -size 13 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Al Bayan} -size 16 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("868x507+255+150")
        top.title("New Toplevel")
        top.configure(background="#a6ddf4")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.38, rely=0.049, height=46, width=475)
        self.Label1.configure(activebackground="#a6ddf4")
        self.Label1.configure(activeforeground="#1c38ed")
        self.Label1.configure(background="#a6ddf4")
        self.Label1.configure(font="-family {Al Bayan} -size 20 -weight bold")
        self.Label1.configure(foreground="#171fff")
        self.Label1.configure(highlightbackground="#ffffffffffff")
        self.Label1.configure(highlightcolor="#2b1582")
        self.Label1.configure(text='''Welcome to Software Defect Prediction System''')

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=-0.02, relheight=1.036, relwidth=0.259)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#21b5ff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.178, rely=0.057, height=52, width=141)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#21b5ff")
        self.Label2.configure(font="-family {Al Bayan} -size 20 -weight bold")
        self.Label2.configure(foreground="white")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''SDP System''')

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.0, rely=0.419, height=62, width=227)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(font="-family {Al Bayan} -size 16")
        self.Button2.configure(foreground="blue")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(justify='left')
        self.Button2.configure(relief="raised")
        self.Button2.configure(text='''Preprocessing''')

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.0, rely=0.305, height=62, width=227)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(font="-family {Al Bayan} -size 16")
        self.Button3.configure(foreground="blue")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(justify='left')
        self.Button3.configure(relief="raised")
        self.Button3.configure(text='''Dataset Selection''')

        self.Button4 = tk.Button(self.Frame1)
        self.Button4.place(relx=0.0, rely=0.533, height=62, width=227)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(font="-family {Al Bayan} -size 16")
        self.Button4.configure(foreground="blue")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(justify='left')
        self.Button4.configure(relief="raised")
        self.Button4.configure(text='''Discretization''')

        self.Button5 = tk.Button(self.Frame1)
        self.Button5.place(relx=0.0, rely=0.648, height=62, width=227)
        self.Button5.configure(activebackground="#ececec")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(font="-family {Al Bayan} -size 16")
        self.Button5.configure(foreground="blue")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(justify='left')
        self.Button5.configure(relief="raised")
        self.Button5.configure(text='''Feature Selection''')

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.0, rely=0.19, height=62, width=227)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(font="-family {Al Bayan} -size 16")
        self.Button1.configure(foreground="blue")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(justify='left')
        self.Button1.configure(overrelief="flat")
        self.Button1.configure(relief="raised")
        self.Button1.configure(text='''Project Info''')
        self.Button1.configure(command=self.uione)


        self.Button6 = tk.Button(self.Frame1)
        self.Button6.place(relx=0.0, rely=0.762, height=62, width=227)
        self.Button6.configure(activebackground="#ececec")
        self.Button6.configure(activeforeground="#000000")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(font="-family {Al Bayan} -size 16")
        self.Button6.configure(foreground="blue")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="black")
        self.Button6.configure(justify='left')
        self.Button6.configure(relief="raised")
        self.Button6.configure(text='''Model Selection''')

        self.Button7 = tk.Button(self.Frame1)
        self.Button7.place(relx=0.0, rely=0.876, height=62, width=227)
        self.Button7.configure(activebackground="#ececec")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(font="-family {Al Bayan} -size 16")
        self.Button7.configure(foreground="blue")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(justify='left')
        self.Button7.configure(relief="raised")
        self.Button7.configure(text='''Outcome''')

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.259, rely=0.296, relheight=0.7, relwidth=0.743)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")

        self.Scrolledlistbox1 = ScrolledListBox(self.Frame2)
        self.Scrolledlistbox1.place(relx=0.0, rely=0.0, relheight=1.025
                , relwidth=0.995)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.288, rely=0.197, height=31, width=126)
        self.Label3.configure(background="#a6ddf4")
        self.Label3.configure(font=font9)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Choose Dataset''')

        self.TCombobox1 = ttk.Combobox(top)
        self.TCombobox1.place(relx=0.467, rely=0.197, relheight=0.053
                , relwidth=0.237)
        self.TCombobox1['values'] = ("PC1", "PC2", "PC3", "PC4", "PC5")
        self.TCombobox1.configure(textvariable=ui2_support.combobox)
        self.TCombobox1.configure(background="#a6ddf4")
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.configure(cursor="fleur")

        self.Button8 = tk.Button(top)
        self.Button8.place(relx=0.743, rely=0.187, height=32, width=97)
        self.Button8.configure(activebackground="#ececec")
        self.Button8.configure(activeforeground="#000000")
        self.Button8.configure(background="#d9d9d9")
        self.Button8.configure(font=font11)
        self.Button8.configure(foreground="blue")
        self.Button8.configure(highlightbackground="#d9d9d9")
        self.Button8.configure(highlightcolor="black")
        self.Button8.configure(relief="raised")
        self.Button8.configure(text='''View Dataset''')
        self.Button8.configure(command=self.viewdataset)

        self.Button9 = tk.Button(top)
        self.Button9.place(relx=0.881, rely=0.187, height=32, width=87)
        self.Button9.configure(activebackground="#ececec")
        self.Button9.configure(activeforeground="#000000")
        self.Button9.configure(background="#d9d9d9")
        self.Button9.configure(foreground="blue")
        self.Button9.configure(highlightbackground="#d9d9d9")
        self.Button9.configure(highlightcolor="black")
        self.Button9.configure(relief="raised")
        self.Button9.configure(text='''Next Step''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp2_start_gui()





